name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release (e.g., 1.2.3)'
        required: true

jobs:
  test:
    uses: ./.github/workflows/test.yml
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Update pubspec.yaml version
        run: |
          # Update pubspec.yaml
          awk -v ver="${{ github.event.inputs.version }}" '/^version:/ {$2=ver} {print}' pubspec.yaml > pubspec.yaml.tmp && mv pubspec.yaml.tmp pubspec.yaml

          # Update build number
          BUILD_NUMBER=$(grep "^version:" pubspec.yaml | cut -d'+' -f2 | tr -d '\r')
          if [ -z "$BUILD_NUMBER" ]; then
            NEW_BUILD=1
          else
            NEW_BUILD=$((BUILD_NUMBER + 1))
          fi

          awk -v build="$NEW_BUILD" '/^version:/ {$0=$0"+"build} {print}' pubspec.yaml > pubspec.yaml.tmp && mv pubspec.yaml.tmp pubspec.yaml

      - name: Create keystore from secrets
        if: secrets.KEYSTORE_BASE64 != ''
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

      - name: Create key.properties
        if: secrets.KEYSTORE_BASE64 != ''
        run: |
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

      - name: Build APK (Release)
        if: secrets.KEYSTORE_BASE64 != ''
        run: flutter build apk --release --split-per-abi

      - name: Build AAB (Release)
        if: secrets.KEYSTORE_BASE64 != ''
        run: flutter build appbundle --release

      - name: Build APK (Debug) - fallback if no signing
        if: secrets.KEYSTORE_BASE64 == ''
        run: flutter build apk --debug

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Get version for file names
        id: file_version
        run: |
          VERSION_BUILD=$(grep "^version:" pubspec.yaml | cut -d' ' -f2 | tr -d '\r')
          echo "version_build=$VERSION_BUILD" >> $GITHUB_OUTPUT

      - name: Upload APK (Universal)
        if: secrets.KEYSTORE_BASE64 != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-release.apk
          asset_name: ussd-emulator-${{ steps.file_version.outputs.version_build }}-universal.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK (ARM64)
        if: secrets.KEYSTORE_BASE64 != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: ussd-emulator-${{ steps.file_version.outputs.version_build }}-arm64.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK (ARM)
        if: secrets.KEYSTORE_BASE64 != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: ussd-emulator-${{ steps.file_version.outputs.version_build }}-arm.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK (x86_64)
        if: secrets.KEYSTORE_BASE64 != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-x86_64-release.apk
          asset_name: ussd-emulator-${{ steps.file_version.outputs.version_build }}-x86_64.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload AAB
        if: secrets.KEYSTORE_BASE64 != ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/bundle/release/app-release.aab
          asset_name: ussd-emulator-${{ steps.file_version.outputs.version_build }}.aab
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Debug APK (fallback)
        if: secrets.KEYSTORE_BASE64 == ''
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-debug.apk
          asset_name: ussd-emulator-${{ steps.file_version.outputs.version_build }}-debug.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Clean up keystore
        if: always()
        run: rm -f android/app/keystore.jks android/key.properties
