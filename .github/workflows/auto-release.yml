name: Auto Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  test:
    uses: ./.github/workflows/test.yml
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    needs: test
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github conventional-changelog-conventionalcommits

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.6'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Build generated files
      run: flutter packages pub run build_runner build --delete-conflicting-outputs

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep "^version:" pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1 | tr -d '\r')
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Determine next version
      id: semantic_release
      run: |
        # Create semantic-release config
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main", "master"],
          "plugins": [
            ["@semantic-release/commit-analyzer", {
              "preset": "conventionalcommits",
              "releaseRules": [
                {"type": "feat", "release": "minor"},
                {"type": "fix", "release": "patch"},
                {"type": "perf", "release": "patch"},
                {"type": "revert", "release": "patch"},
                {"type": "docs", "release": false},
                {"type": "style", "release": false},
                {"type": "chore", "release": false},
                {"type": "refactor", "release": "patch"},
                {"type": "test", "release": false},
                {"type": "build", "release": false},
                {"type": "ci", "release": false},
                {"breaking": true, "release": "major"}
              ]
            }],
            ["@semantic-release/release-notes-generator", {
              "preset": "conventionalcommits",
              "presetConfig": {
                "types": [
                  {"type": "feat", "section": "🚀 Features"},
                  {"type": "fix", "section": "🐛 Bug Fixes"},
                  {"type": "perf", "section": "⚡ Performance"},
                  {"type": "revert", "section": "⏪ Reverts"},
                  {"type": "refactor", "section": "♻️ Refactoring"},
                  {"type": "docs", "section": "📚 Documentation", "hidden": false},
                  {"type": "style", "section": "💎 Styles", "hidden": true},
                  {"type": "chore", "section": "🔧 Chores", "hidden": true},
                  {"type": "test", "section": "🧪 Tests", "hidden": true},
                  {"type": "build", "section": "📦 Build", "hidden": true},
                  {"type": "ci", "section": "🤖 CI", "hidden": true}
                ]
              }
            }],
            "@semantic-release/changelog",
            "@semantic-release/github",
            ["@semantic-release/git", {
              "assets": ["CHANGELOG.md", "pubspec.yaml"],
              "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
            }]
          ]
        }
        EOF

        # Dry run to get next version
        npx semantic-release --dry-run > semantic_output.txt 2>&1 || true
        
        # Extract version from output
        NEXT_VERSION=$(grep -o "Published release [0-9]*\.[0-9]*\.[0-9]*" semantic_output.txt | grep -o "[0-9]*\.[0-9]*\.[0-9]*" | head -1)
        
        if [ -z "$NEXT_VERSION" ]; then
          echo "No release needed"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "Next version: $NEXT_VERSION"
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Update pubspec.yaml version
      if: steps.semantic_release.outputs.should_release == 'true'
      run: |
        NEW_VERSION="${{ steps.semantic_release.outputs.version }}"
        
        # Get current build number and increment it
        CURRENT_BUILD=$(grep "^version:" pubspec.yaml | cut -d'+' -f2 | tr -d '\r')
        if [ -z "$CURRENT_BUILD" ]; then
          NEW_BUILD=1
        else
          NEW_BUILD=$((CURRENT_BUILD + 1))
        fi
        
        # Update pubspec.yaml
        sed -i "s/^version:.*/version: $NEW_VERSION+$NEW_BUILD/" pubspec.yaml
        
        echo "Updated version to $NEW_VERSION+$NEW_BUILD"

    - name: Create keystore from secrets
      if: steps.semantic_release.outputs.should_release == 'true'
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Create key.properties
      if: steps.semantic_release.outputs.should_release == 'true'
      run: |
        echo "storePassword=${{ secrets.STORE_PASSWORD }}" > android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=keystore.jks" >> android/key.properties
      env:
        STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}

    - name: Build APK (Release)
      if: steps.semantic_release.outputs.should_release == 'true'
      run: flutter build apk --release --split-per-abi

    - name: Build AAB (Release)
      if: steps.semantic_release.outputs.should_release == 'true'
      run: flutter build appbundle --release

    - name: Build APK (Debug) - fallback if no signing
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 == ''
      run: flutter build apk --debug

    - name: Run semantic release
      if: steps.semantic_release.outputs.should_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Run semantic release
        npx semantic-release

    - name: Get release info
      if: steps.semantic_release.outputs.should_release == 'true'
      id: release_info
      run: |
        VERSION="${{ steps.semantic_release.outputs.version }}"
        RELEASE_ID=$(gh release view "v$VERSION" --json id --jq '.id')
        UPLOAD_URL=$(gh release view "v$VERSION" --json uploadUrl --jq '.uploadUrl')
        echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
        echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version for file names
      if: steps.semantic_release.outputs.should_release == 'true'
      id: file_version
      run: |
        VERSION_BUILD=$(grep "^version:" pubspec.yaml | cut -d' ' -f2 | tr -d '\r')
        echo "version_build=$VERSION_BUILD" >> $GITHUB_OUTPUT

    - name: Upload APK (Universal)
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 != ''
      run: |
        gh release upload "${{ steps.release_info.outputs.tag_name }}" \
          "build/app/outputs/flutter-apk/app-release.apk#ussd-emulator-${{ steps.file_version.outputs.version_build }}-universal.apk"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Upload APK (ARM64)
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 != ''
      run: |
        gh release upload "${{ steps.release_info.outputs.tag_name }}" \
          "build/app/outputs/flutter-apk/app-arm64-v8a-release.apk#ussd-emulator-${{ steps.file_version.outputs.version_build }}-arm64.apk"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Upload APK (ARM)
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 != ''
      run: |
        gh release upload "${{ steps.release_info.outputs.tag_name }}" \
          "build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk#ussd-emulator-${{ steps.file_version.outputs.version_build }}-arm.apk"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Upload APK (x86_64)
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 != ''
      run: |
        gh release upload "${{ steps.release_info.outputs.tag_name }}" \
          "build/app/outputs/flutter-apk/app-x86_64-release.apk#ussd-emulator-${{ steps.file_version.outputs.version_build }}-x86_64.apk"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Upload AAB
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 != ''
      run: |
        gh release upload "${{ steps.release_info.outputs.tag_name }}" \
          "build/app/outputs/bundle/release/app-release.aab#ussd-emulator-${{ steps.file_version.outputs.version_build }}.aab"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Upload Debug APK (fallback)
      if: steps.semantic_release.outputs.should_release == 'true' && env.KEYSTORE_BASE64 == ''
      run: |
        gh release upload "${{ steps.release_info.outputs.tag_name }}" \
          "build/app/outputs/flutter-apk/app-debug.apk#ussd-emulator-${{ steps.file_version.outputs.version_build }}-debug.apk"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    - name: Clean up keystore
      if: always()
      run: rm -f android/app/keystore.jks android/key.properties