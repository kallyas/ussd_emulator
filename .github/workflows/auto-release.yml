name: Auto Release

on:
  push:
    branches:
      - main

jobs:
  test:
    uses: ./.github/workflows/test.yml
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git history and semantic-release

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.6"
          channel: "stable"
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Build generated files
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/git @semantic-release/changelog

      - name: Run semantic-release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release and capture output
          npx semantic-release > semantic-release-output.txt 2>&1 || true
          
          # Check if a new version was published
          if grep -q "Published release" semantic-release-output.txt; then
            NEW_VERSION=$(grep -o "Published release [0-9]\+\.[0-9]\+\.[0-9]\+" semantic-release-output.txt | cut -d' ' -f3)
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
          
          # Output the semantic-release log for debugging
          cat semantic-release-output.txt

      - name: Update pubspec.yaml version
        if: steps.semantic_release.outputs.should_release == 'true'
        run: |
          NEW_VERSION="${{ steps.semantic_release.outputs.new_version }}"
          # Validate version format
          if ! [[ $NEW_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $NEW_VERSION"
            exit 1
          fi

          # Get current build number and increment it
          CURRENT_BUILD=$(grep "^version:" pubspec.yaml | cut -d'+' -f2 | tr -d '\r')
          NEW_BUILD=$((CURRENT_BUILD + 1))

          # Update pubspec.yaml
          sed -i "s/^version:.*/version: $NEW_VERSION+$NEW_BUILD/" pubspec.yaml

          echo "Updated version to $NEW_VERSION+$NEW_BUILD"
          echo "version=$NEW_VERSION+$NEW_BUILD" >> $GITHUB_OUTPUT
        id: update_version

      - name: Commit version update
        if: steps.semantic_release.outputs.should_release == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pubspec.yaml
          git commit -m "chore(release): update version to ${{ steps.update_version.outputs.version }}" || echo "No changes to commit"
          git push

      - name: Check for keystore
        id: check_keystore
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "has_keystore=true" >> $GITHUB_OUTPUT
          else
            echo "has_keystore=false" >> $GITHUB_OUTPUT
          fi

      - name: Create keystore from secrets
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks

      - name: Create key.properties
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: |
          cat << EOF > android/key.properties
          storePassword=${{ secrets.STORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          EOF

      - name: Build APK (Release)
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: flutter build apk --release --split-per-abi

      - name: Build AAB (Release)
        if: steps.check_keystore.outputs.has_keystore == 'true'
        run: flutter build appbundle --release

      - name: Build APK (Debug)
        if: steps.check_keystore.outputs.has_keystore == 'false'
        run: flutter build apk --debug

      - name: Upload APK (Universal)
        if: steps.check_keystore.outputs.has_keystore == 'true' && steps.semantic_release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semantic_release.outputs.new_version }}
          files: build/app/outputs/flutter-apk/app-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK (ARM64)
        if: steps.check_keystore.outputs.has_keystore == 'true' && steps.semantic_release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semantic_release.outputs.new_version }}
          files: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK (ARM)
        if: steps.check_keystore.outputs.has_keystore == 'true' && steps.semantic_release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semantic_release.outputs.new_version }}
          files: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload APK (x86_64)
        if: steps.check_keystore.outputs.has_keystore == 'true' && steps.semantic_release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semantic_release.outputs.new_version }}
          files: build/app/outputs/flutter-apk/app-x86_64-release.apk
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload AAB
        if: steps.check_keystore.outputs.has_keystore == 'true' && steps.semantic_release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semantic_release.outputs.new_version }}
          files: build/app/outputs/bundle/release/app-release.aab
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Debug APK
        if: steps.check_keystore.outputs.has_keystore == 'false' && steps.semantic_release.outputs.should_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.semantic_release.outputs.new_version }}
          files: build/app/outputs/flutter-apk/app-debug.apk
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up keystore
        if: always()
        run: rm -f android/app/keystore.jks android/key.properties
